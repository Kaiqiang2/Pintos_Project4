			+--------------------+
			|        EE 311      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.
Team10 

20120597 Yeo Hyun Ho pkpk5958@kaist.ac.kr 
20120130 Kim Woo Sung k.woosung@kaist.ac.kr


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1. struct thread (thread.h)
    1) int64_t sleep_ticks: The timer sleeps until sleep_ticks. It wakes up when timer_tick() > sleep_ticks.

2. static struct list sleep_list (timer.c)
    It is list of all sleeping threads element. 

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

1. timer_sleep 
    1) Turn interrupt off 
    2) Set sleeps ticks by adding start with ticks 
    3) Put the current thread to sleep list ordered by sleep_ticks
    4) Block the current thread
    5) Turn interrupt on

2. timer_interrupt
    1) increment ticks and call thread_tick
    2) wake up all threads which sleep_tick is less than ticks
    
>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
    1) In timer_sleep, we put threads into sleep list ordered by sleep_ticks. Therefore, in timer_interrupt, we don't have to order it resulting in minimizing the amount of time. 

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
    1) We turn off interrupt while timer_sleep() do works related to synchronization issue

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
    1) Same as A4, We turn off interrupt, so the external inturrpt will be delayed 

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We want to minimize time spent in timer_interrupt(), so we order threads in timer_sleep. 

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
1. struct thread
    1) struct lock* target_lock: the lock which this thread want to have, but already taken by another thread
    2) struct list lock_list: list of locks which this thread hold
    3) int ori_priority: original priority of this thread before prioritydonation

2. struct lock
    1) int lock_priority: the hightest priority of thread which waits for this lock
    2) struct list_elem elem: list_elem which in order to order lock according to lock_priority

3. struct semaphore_elem
    1) int priority: the highest priority of thread which is related to semaphore

4. #define LK_DEFAULT
    It is defualt value of lock_priority of struct lock when it is not hold by any threads.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

T1, T2, T3, T4: threads
LK1, LK2: locks

    LK1
T4-------->   LK1
    LK2    T2------>T1
T3-------->

T1 priority: max (T1, T2, T3, T4)
T2 priority: max (T2, T3, T4)

struct thread* target_lock
struct list lock_list

T4 target_lock: T2
T3 target_lock: T2
T2 target_lcok: T1

T2 lock_list: LK2
T1 lock_list: LK1

We use above data structures

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Before we wakes up those synchronization primitives, we ordered those decrementaly in order of priority

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

1. lock_aquire
   1) Set target_lock of current thread by input argument 'lock'
   2) Do priority donation
   3) sema_down
   4) Set holder of 'lock' by current thread

2. Nested donation (input: lock)
   1) Examine whether hodler of lock isn't NULL (if NULL, then terminate 2.)
   2) If holder of lock priority is less than current thread, 
      set that priority by curent one
   3) Examine whether holder of lock has target_lock 
   4) If there is target_lock, do recursively 1), 2), 3) steps by subsituting current thread by holder of lock & holder of lock by holder of target lock 

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for
   1) Set holder of struct lock to NULL
   2) Sort the waiters of lock in order of priority
   3) Examine whether lock_list of current thread is empty or not
   4) If it is empty, set the it's priority by ori_priority and terminate
      If is nothing do the following steps
   5) Examine highest lock_priority of lock in the lock_list of current thread
   6) If is equal to LK_DEFUALT, set it's priority by ori_priority
      If is not equal to LK_DEFAULT, set it's priority by lock_priority

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

We turn off interrupt while thread_set_priority() 
Because we set the priority considering lots of conditions 
involving other values like ori_priority, curr->target_lock, curr->status,
These values should not be changed while we set the priority by interrupt handlers or other things

Because interrupt handler can't get locks and don't know about it, 
We should turn off interrupt 	


---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

First we consider the design which dynamically get the original_priority by tracking donate relation
However, it seems inefficient in time manner, so we divide the priority into ori_priority and priority
, and we save the changes in priority when priority donation and recovery happens
It uses more memories than the first, but we think time is more important than memory in this case. 


			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less

In thread.h

1. struct thread
    1) int recent_cpu;               //The thread's recent_cpu value, which is a measurement of how much CPU time the thread has received recently.
    2) struct list_elem elem_cpu;    //struct list_elem, which is used to add the thread to remain_list

In thread.c.

static struct list remain_list;  //The list that keep track of all threads except idle_thread; Used to calculate recent_cpu and priority values of all threads at designated timer ticks.
 
static int load_avg;          //Load_avg value, which estimates the average number of thrads ready to run over the past minute.

---- ALGORITHMS ----
>> C2: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

Yes. If multiple threads have same priority, the scheduler schedules the frontmost thread in the ready queue to run, which is the thread that has been run least recently.

>> C3: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

Most of the computation needs to be done within the interrupt handler, since the computation needs to be done at exact time. Incrementing the recent_cpu value and updating the priority of current thread does not take very much time, but updating recent_cpu and load_avg every second, which is calculated over all threads, may affect performance. Other than calculating ticks, priority, recent_cpu, load_avg, and waking up threads are not included in timer interrupt to minimize time spent in timer_interrupt. In addition, we order ready_list to run highest_thread which consumes much time in outside of interrupt context

---- RATIONALE ----

>> C4: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?


Advantages:
1) Simple, since we didn't lock the thread variables.
2) Using macros for fixed-point math makes calculations faster, and using <<(bitwise calculation) with the macros declared for how many bits are representing the fraction, makes it easy to control the location of floating point in fixed-point real arithmatic.

Disadvantages:
1) Less performance due to turning off interrupts instead of locking the thraed variables.

If we have more time, we would implement lock to solve synchronization issue instead of interrupt in possible cases which will result in improving speed of the code 


>> C5: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

The floating data is declared as int32_t, and its calculation is done by macros. Using macros minimized the time used for calculation. The macros are defined in thread.h, since the calculation is done in functions located in thread.c

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
